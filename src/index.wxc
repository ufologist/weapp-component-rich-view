<template>
<view>
    <!-- 渲染多块 HTML 内容 -->
    <rich-text wx:for="{{htmlContents}}" wx:key="content"
               nodes="{{item.content || defaultHtmlContent}}" style="{{item.style}}"></rich-text>
    <block wx:for="{{buttons}}" wx:key="content">
        <!-- 小程序自带按钮的逻辑 -->
        <button wx:if="{{item.behavior === 'weapp'}}" open-type="{{item.openType}}"
                data-index="{{index}}" bindtap="clickButton"
                style="{{item.style}}">{{item.content}}</button>
        <!-- 内置自定义按钮的逻辑 -->
        <button wx:else
                data-index="{{index}}" bindtap="clickButton"
                style="{{item.style}}">{{item.content}}</button>
    </block>
</view>
</template>

<script>
import {
    getCssString
} from 'weapp-commons-util';

export default {
    properties: {
        contents: {
            type: Array,
            value: null,
            observer: 'showContents'
        },
        loadHtmlContent: { // 加载 HTML 内容的方法
            type: Function
        },
        defaultHtmlContent: {
            type: String,
            value: '<p style="text-align:center">正在加载中...</p>'
        },
        emptyHtmlContent: {
            type: String,
            value: '<p style="text-align:center">暂无内容</p>'
        },
        errorHtmlContent: {
            type: String,
            value: '<p style="text-align:center">加载失败:(</p>'
        }
    },
    data: {
        htmlContents: [{
            type: 'html',
            content: ''
        }],
        buttons: null
    },

    ready: function() {
        this.setData({
            htmlContents: [{
                type: 'html',
                content: this.data.defaultHtmlContent
            }]
        });

        this.showContents();
    },

    methods: {
        showContents: function() {
            if (this.data.contents && this.data.contents.filter) {
                var htmlContents = this.data.contents.filter(function(item) {
                    return item.type === 'html' && !item.hidden;
                });

                var buttons = this.data.contents.filter(function(item) {
                    return item.type === 'button' && !item.hidden;
                });

                this.showHtmlContent(htmlContents);
                this.showButtons(buttons)
            } else {
                this.setData({
                    'htmlContents[0].content': this.data.emptyHtmlContent
                });
            }
        },
        showHtmlContent: function(htmlContents) {
            htmlContents.forEach(function(item) {
                item.style = getCssString(item.style);
            });

            // 给待加载的内容补充占位的内容
            htmlContents.filter(function(item) {
                return item.src && !item.content;
            }).forEach((item) => {
                item._loaded = false;
                item.content = this.data.defaultHtmlContent;
            });

            this.setData({
                htmlContents: htmlContents
            });

            // 加载内容
            htmlContents.forEach((item, index) => {
                if (item._loaded === false) {
                    if (this.data.loadHtmlContent) {
                        this.data.loadHtmlContent(item.src, item).then((data) => {
                            var html = data.toString();

                            // 优化 HTML 内容中的 img 标签
                            if (item.optimizeImgTag !== false) {
                                // 找到 img 标签
                                var imgTags = html.match(/<img[^>]*>/gim);
                                if (imgTags) {
                                    // 替换 img 标签中 style 属性的内容, 追加样式
                                    var appendStyle = 'display:block;width:100%;';
                                    var newImgTags = imgTags.map(function(imgTag) {
                                        var tag = '';
                                        if (imgTag.indexOf('style') == -1) {
                                            tag = imgTag.replace('<img', `<img style="${appendStyle}"`);
                                        } else {
                                            tag = imgTag.replace(/style\s*=\s*["']?([^'"]*)['"]?/gim, `style="$1;${appendStyle}"`);
                                        }
                                        return tag;
                                    });

                                    // 替换成新的 img 标签的内容
                                    html = imgTags.reduce(function(html, imgTag, index) {
                                        return html.replace(imgTag, newImgTags[index]);
                                    }, html);
                                }
                            }

                            item.content = html;
                            item._loaded = true;

                            this.setData({
                                [`htmlContents[${index}].content`]: html,
                                [`htmlContents[${index}]._loaded`]: true
                            });
                        }).catch(() => {
                            this.setData({
                                [`htmlContents[${index}].content`]: item.src + this.data.errorHtmlContent,
                                [`htmlContents[${index}]._loaded`]: true
                            });
                        });
                    } else {
                        console.warn('[rich-content]', '缺少 loadHtmlContent 属性, 无法加载 HTML 内容');
                    }
                }
            });
        },
        showButtons: function(buttons) {
            buttons.forEach(function(item) {
                item.style = getCssString(item.style);
            });
            this.setData({
                buttons: buttons
            });
        },

        clickButton: function(event) {
            var index = event.currentTarget.dataset.index;
            var button = this.data.buttons[index];

            // 当 openType 为 `wx.xxx` 时调用 wx[xxx] 的 API, 例如 `wx.navigateTo`
            if (button.openType.indexOf('wx.') === 0) {
                this.wxApi(button);
            }

            this.triggerEvent('clickbutton', button);
        },
        wxApi: function(button) {
            var fullApi = button.openType;
            var api = fullApi.replace('wx.', '');

            if (api && wx[api]) {
                // wx.navigateTo 调用失败后, options.url 被改写了
                // 因此这里复制一份数据达到隔离
                var _options = Object.assign({}, button.options);

                if (!_options.fail) {
                    _options.fail = function(result) {
                        wx.showToast({
                            icon: 'none',
                            title: result.errMsg ? result.errMsg : '操作失败:('
                        });
                    };
                }

                try {
                    wx[api](_options);
                } catch (error) {
                    wx.showToast({
                        icon: 'none',
                        title: error.message ? error.message : `调用 ${fullApi} 失败:(`
                    });
                }
            } else {
                wx.showToast({
                    icon: 'none',
                    title: `配置 ${fullApi} 有误:(`
                });
            }
        }
    }
};
</script>
<style lang="less"></style>